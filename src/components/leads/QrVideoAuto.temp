import QrScanner from 'qr-scanner';
import { useState, useEffect, useRef } from 'react';
import config from '../../../config';
import Button from '@mui/joy/Button';
import Sheet from '@mui/joy/Sheet';

function QrVideoAuto({ setHasScanned, setQrResult }) {
  const videoRef = useRef<HTMLVideoElement>(null);

  const [cameraActive, setCameraActive] = useState(false); // used to toggle

  /* useEffect(() => {
    // initialise qr scanner
    const video = videoRef.current;
    if (!video) {
      // guard clause
      alert('No video detected! Please allow camera access.');
      return;
    }

    // Initialise QR scanner
    const scanner = new QrScanner(
      video,
      (result: string | QrScanner.ScanResult) => {
        handleScan(result);
      },
      config.scannerOptions
    );
    qrScannerRef.current = scanner;
    setHasScanned(false);
    // setQrResult(undefined);
    setCameraActive(true);
    qrScannerRef.current.start();
    console.log('initialised qr scanner');

    return () => {
      // clean up
      qrScannerRef.current?.destroy();
      console.log('destroyed qr scanner');
    };
  }, []);

  useEffect(() => {
    // toggles QR scanner on/off
    if (cameraActive) {
      resetState();
      qrScannerRef.current?.start();
    } else {
      qrScannerRef.current?.stop();
    }
  }, [cameraActive]); */

  useEffect(() => {
    // initialise qr scanner
    const video = videoRef.current;
    if (!video) {
      alert('video is null');
      return;
    }
    const scanner = new QrScanner(
      video,
      (result: string | QrScanner.ScanResult) => {
        handleScan(result);
      },
      config.scannerOptions
    );

    console.log('initialised qr scanner');

    return () => {
      // clean up
      scanner.destroy();
      console.log('destroyed qr scanner');
    };
  }, []);

  useEffect(() => {
    // toggles QR scanner on/off
    if (cameraActive) {
      resetState();
    }
  }, [cameraActive]);

  function handleScan(result) {
    //console.log(result.data);
    setQrResult(result.data);
    setHasScanned(true);
    setCameraActive(false);
    //qrScannerRef.current?.stop();
  }

  /**
   * Hides the leadForm by setting hasScanned and QR result to an undefined value.
   */
  function resetState() {
    setHasScanned(false);
    setQrResult(undefined);
  }

  return (
    <>
      <Sheet>
        <video
          ref={videoRef}
          style={{ width: '100%', height: '100%' }}
        // hidden={hasScanned}
        />
        <Button onClick={() => setCameraActive(true)}>Activate Scanner</Button>
      </Sheet>
    </>
  );
}

export default QrVideoAuto;
