import { useState, useEffect } from 'react';
import Scanner from './Scanner.js';
import LeadForm from './results/LeadForm.js';
import config from '../../../config.js';
import { lookupValue, getCurrentUserEmail } from '../../firebase-setup/firebase-functions.js';

function ScanContainer() {
  const [hasScanned, setHasScanned] = useState(false);
  const [qrResult, setQrResult] = useState('');
  const [leadFields, setLeadFields] = useState<typeof config.leadFields>(config.leadFields); // stores the lead fields

  useEffect(() => {
    async function populateTemplate() {
      const lead = { ...config.leadFields }; // copy object
      let doc = (await lookupValue(qrResult, getCurrentUserEmail(), config.lookupField))[0];
      if (!doc) {
        // Does not exist, pull from EB
        doc = (await lookupValue(qrResult, config.lookupCollection, config.lookupField))[0];
        // Creates empty object if not found from EB pull
        if (!doc) {
          doc = {};
          const key = config.lookupField;
          doc[key] = qrResult;
        }
      }

      // update object with values from doc
      for (const key of Object.keys(lead)) {
        if (doc[key]) {
          lead[key] = doc[key];
        }
      }
      return lead;
    }

    populateTemplate().then((lead) => {
      setLeadFields(lead);
    });
  });

  return (
    <>
      {!hasScanned && <Scanner setQrResult={setQrResult} setHasScanned={setHasScanned} />}

      {hasScanned && <LeadForm leadFields={leadFields} afterSubmit={() => setHasScanned(false)} />}
    </>
  );
}

export default ScanContainer;
